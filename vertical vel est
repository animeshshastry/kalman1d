
#include <Wire.h>

#define GYRO_XOUT_REGISTER  0x43
#define GYRO_YOUT_REGISTER  0x45
#define GYRO_ZOUT_REGISTER  0x47

#define ACCELO_XOUT_REGISTER 0x3B
#define ACCELO_YOUT_REGISTER 0x3D
#define ACCELO_ZOUT_REGISTER 0x3F

#define TEMP_OUT_REGISTER 0x41

/*The below register addresses are for the configuration bits of the gyrometer and accelometer ranges*/
#define GYRO_CONFIG_REGISTER 0x1B
#define FS_SEL_BIT 3//0-> +-250 deg/s 1-> +-500 deg/s 0-> +-1000 deg/s 0-> +-2000 deg/s

#define ACCEL0_CONFIG_REGISTER 0x1C
#define AFS_SEL_BIT 3//0-> +-2g 1-> +-4g 0-> +-8g 0-> +-16g

/*One of the power registers.  Contains the Sleep mode bit. The sleep mode bit should be set to 0 for sleep mode to be deactivated.*/
#define PWR_MGMT_1_REGISTER 0x6B

#define MPU_ADDRESS 0x68 // Can be made 0x69 as well using the AD0 pin of the IMU.

#define CONFIG_REGISTER 0x1A //The register containing the DLPF bits.

#define CONFIG_VALUE  4  //0->260Hz  1->184Hz  2->94Hz  3->44Hz  4->21Hz  5->260Hz  6->10Hz  7->5Hz
//It is should be noted that decreasing the bandwidth increases the delay.
/*The dividing factors. They change with different modes of operation of the gyro and accelerometer*/
#define ACCELO_DIVIDING_FACTOR 16384//2g->16384  4g->8192  8g->4096  16g->2048
#define GYRO_DIVIDING_FACTOR 131  //250dps->131  500dps->65.5  1000dps->32.8  2000dps->16.4 

/*For temperature sensor*/
#define TEMP_DIVIDING_FACTOR 340
#define TEMP_OFFSET  36.53


int16_t accx;
int16_t accy;
int16_t accz;

int16_t wwx;
int16_t wwy;
int16_t wwz;

float ax;
float ay;
float az;
float wx;
float wy;
float wz;
float temperature;




float z,a,y,s,sinv,r,K[2],X[2]={0,0},XTEMP[2],PTEMP[2][2],H[2]={1,0},diff=0,previous=0,current;

float F[2][2]={{1,diff},
               {0,  1 }};
  
float U[2]={(diff*diff)/2,
            diff     };
       
  
float P[2][2]={{1,0},
               {0,1}};


void initI2CMPU(void) //Begins I2C communication with  MPU using it's internal 8MHz oscillator for CLKSEL and also wakes up the MPU.
{
  Wire.begin();

  Wire.beginTransmission(MPU_ADDRESS);

  Wire.write(PWR_MGMT_1_REGISTER);
  Wire.write(0);

  Wire.endTransmission(true);
  Wire.beginTransmission(MPU_ADDRESS);

  Wire.write(CONFIG_REGISTER);
  Wire.write(CONFIG_VALUE);

  Wire.endTransmission(true);

}

void getMPUValues(void)
{
  Wire.beginTransmission(MPU_ADDRESS);
  Wire.write(ACCELO_XOUT_REGISTER);
  Wire.endTransmission(false);

  Wire.requestFrom(MPU_ADDRESS, 14, true);

  if (Wire.available())
  {
    accx = (Wire.read() << 8) | Wire.read();
    accy = (Wire.read() << 8) | Wire.read();
    accz = (Wire.read() << 8) | Wire.read();

    temperature = (Wire.read() << 8) | Wire.read();

    wwx = (Wire.read() << 8) | Wire.read();
    wwy = (Wire.read() << 8) | Wire.read();
    wwz = (Wire.read() << 8) | Wire.read();
  }
  
  ax=(float)accx/16384;
  ay=(float)accy/16384;
  az=(float)accz/16384;
  
  wx=(wwx/131)*(3.14/180);
  wy=(wwy/131)*(3.14/180);
  wz=(wwz/131)*(3.14/180);
}
void getheight()
{
  //height from barometer
  
  
  
  
  
}
void getaccel()
{
  //acceleration from imu
  getMPUValues();
  a=az-1;
  
}

void updatematr()
{
  F[0][1]=diff;
  U[0]=diff*diff/2;
  U[1]=diff;
}
void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  initI2CMPU();
}

void loop() {
  // put your main code here, to run repeatedly:
  getheight();
  getaccel();
  current=millis()/1000;
  diff=current-previous;
  previous=current;
  updatematr();
  kalman();
  printX();
}

void kalman()
{
  
  //measurement update
  
  y=z-(H[0]*X[0]+H[1]*X[1]);
  
  s=(H[0]*P[0][0]+H[1]*P[1][0])*H[0]+H[1]*(H[0]*P[0][1]+H[1]*P[1][1])+r;
  sinv=1/s;
  
  K[0]=(P[0][0]*H[0]+P[0][1]*H[1])*sinv;
  K[1]=(P[1][0]*H[0]+P[1][1]*H[1])*sinv;
  
  X[0]=X[0]+K[0]*y;
  X[1]=X[1]+K[1]*y;
  
  PTEMP[0][0]=P[0][0]*(1-K[0]*H[0])-P[1][0]*K[0]*H[1];
  PTEMP[0][1]=P[0][1]*(1-K[0]*H[0])-P[1][1]*K[0]*H[1];
  PTEMP[1][0]=-P[0][0]*K[1]*H[0]+P[1][0]*(1-K[1]*H[1]);
  PTEMP[1][1]=-P[0][1]*K[1]*H[0]+P[1][1]*(1-K[1]*H[1]);
  P[0][0]=PTEMP[0][0];
  P[0][1]=PTEMP[0][1];
  P[1][0]=PTEMP[1][0];
  P[1][1]=PTEMP[1][1];
  
  //PREDICTION
  
  XTEMP[0]=F[0][0]*X[0]+F[0][1]*X[1]+a*U[0];
  XTEMP[1]=F[1][0]*X[0]+F[1][1]*X[1]+a*U[1];
  X[0]=XTEMP[0];
  X[1]=XTEMP[1];
  
  
  PTEMP[0][0]=F[0][0]*(F[0][0]*P[0][0]+F[0][1]*P[1][0])+F[0][1]*(F[0][0]*P[0][1]+F[0][1]*P[1][1]);
  PTEMP[0][1]=F[1][0]*(F[0][0]*P[0][0]+F[0][1]*P[1][0])+F[1][1]*(F[0][0]*P[0][1]+F[0][1]*P[1][1]);
  PTEMP[1][0]=F[0][0]*(F[1][0]*P[0][0]+F[1][1]*P[1][0])+F[0][1]*(F[1][0]*P[0][1]+F[1][1]*P[1][1]);
  PTEMP[1][1]=F[1][0]*(F[1][0]*P[0][0]+F[1][1]*P[1][0])+F[1][1]*(F[1][0]*P[0][1]+F[1][1]*P[1][1]);
  P[0][0]=PTEMP[0][0];
  P[0][1]=PTEMP[0][1];
  P[1][0]=PTEMP[1][0];
  P[1][1]=PTEMP[1][1];
  
}

void printX()
{
  Serial.print(X[0]);Serial.print('\t');
  Serial.print(X[1]);Serial.print('\t');
  Serial.print('\n');
}
